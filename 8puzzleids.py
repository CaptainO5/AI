# -*- coding: utf-8 -*-
"""8PuzzleIDS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-OE8l_q3XFL5sULW43ZK5vgbxo10Scmv
"""

import numpy as np

class Node:
  def __init__(self, state, parent, cost, action):
    self.currentState = state
    self.parent = parent
    self.g = cost
    self.a = action # Action applied to reach the state L, R, T or D

  def expand(self):
    i, j = np.where(self.currentState == 0)
    i, j = int(i), int(j) # Current position of the blank -> {0}
    children = []

    # Move the blank one step at a time
    if self.a != 'D' and i - 1 >= 0:
        s = self.currentState.copy()
        s[i][j] = s[i - 1][j]
        s[i - 1][j] = 0
        children.append(Node(s, self, self.g + 1, 'T'))

    if self.a != 'R' and j - 1 >= 0:
        s = self.currentState.copy()
        s[i][j] = s[i][j - 1]
        s[i][j - 1] = 0
        children.append(Node(s, self, self.g + 1, 'L'))
    
    if self.a != 'L' and j + 1 <= 2:
        s = self.currentState.copy()
        s[i][j] = s[i][j + 1]
        s[i][j + 1] = 0
        children.append(Node(s, self, self.g + 1, 'R'))

    if self.a != 'T' and i + 1 <= 2:
        s = self.currentState.copy()
        s[i][j] = s[i + 1][j]
        s[i + 1][j] = 0
        children.append(Node(s, self, self.g + 1, 'D'))
    return children

def rec_DLS(node, limit, goal):
  if np.allclose(goal, node.currentState):
    return f"Solution found, cost: {node.g}"
  if limit == 0:
    return 'cutoff'

  c_o = False
  for child in node.expand():
    res = rec_DLS(child, limit - 1, goal)
    if res == 'cutoff':
      c_o = True 
    elif res != 'failure':
      print(child.currentState, f"depth: cost - {limit - 1}")
      return res
  return 'cutoff' if c_o else 'failure'
    
def IDS(startState, goal):
  l = 0
  while True:
    print(f"Depth: {l}")
    res = rec_DLS(startState, l, goal)
    if res != 'failure':
      if res != 'cutoff':
        print(f"Result: {res}")
        return
      else: 
        print(f"Result: {res}")
        l += 1
    else:
      print("Solution cannot be found")
      return

"""0 is considered as the blank.."""

puzzle = [np.arange(9).reshape(3, 3)]
np.random.shuffle(puzzle) # For a random initial state

# puzzle = np.asarray([[2, 8, 3], [1, 6, 4], [7, 0, 5]]) #An example from the book
print("Initial State\n", puzzle)

goal = list(np.arange(1, 9))
goal.append(0)
goal = np.asarray(goal).reshape(3, 3)
# goal = np.asarray([[1, 2, 3], [8, 0, 4], [7, 6, 5]]) #An example from the book

IDS(Node(puzzle, None, 0, ""), goal)